generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  externalUserId String  @unique
  username       String  @unique
  firstName      String  @default("")
  lastName       String  @default("")
  imageUrl       String
  posts          Post[]
  stream         Stream?

  subscribedTo Subscription[] @relation("SubscribedBy")
  subscribedBy Subscription[] @relation("SubscribedTo")

  bannedUsers Ban[] @relation("BannedBy")
  bannedBy    Ban[] @relation("Banned")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  subscriberId String @db.ObjectId

  user       User @relation(name: "SubscribedTo", fields: [userId], references: [id], onDelete: Cascade)
  subscriber User @relation(name: "SubscribedBy", fields: [subscriberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, subscriberId])
}

model Ban {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  bannedUserId String @db.ObjectId

  user       User @relation(name: "BannedBy", fields: [userId], references: [id], onDelete: Cascade)
  bannedUser User @relation(name: "Banned", fields: [bannedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, bannedUserId])
}

model Stream {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  title  String

  imageUrl  String?
  ingressId String?
  serverUrl String?
  streamKey String?

  isLive                   Boolean @default(false)
  chatDelay                Int     @default(1)
  isChatEnabled            Boolean @default(true)
  isChatForSubscribersOnly Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([title])
}

model Post {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  title  String
  body   String
  images Image[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([title, body])
}

model Image {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  key   String

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([title])
}

model Video {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  key          String
  thumbnailKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([title])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  externalUserId String @unique
  username       String @unique
  imageUrl       String

  stream Stream?

  subscribedTo Subscription[] @relation("SubscribedBy")
  subscribedBy Subscription[] @relation("SubscribedTo")

  bannedUsers Ban[] @relation("BannedBy")
  bannedBy    Ban[] @relation("Banned")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  subscriberId String @db.ObjectId

  user       User @relation(name: "SubscribedTo", fields: [userId], references: [id], onDelete: Cascade)
  subscriber User @relation(name: "SubscribedBy", fields: [subscriberId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, subscriberId])
}

model Ban {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  bannedUserId String @db.ObjectId

  user       User @relation(name: "BannedBy", fields: [userId], references: [id], onDelete: Cascade)
  bannedUser User @relation(name: "Banned", fields: [bannedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, bannedUserId])
}

model Stream {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  imageUrl String
  userId   String @unique @db.ObjectId

  isLive                  Boolean @default(false)
  chatDelay               Int     @default(1)
  isChatEnabled           Boolean @default(true)
  isChatForSubscribedOnly Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
